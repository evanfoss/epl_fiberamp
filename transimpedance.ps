%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.8.1-20121123-13-g875406c
%%CreationDate: Wed Dec 31 12:35:01 2014
%%Title: /oldroot/home/fosse/Documents/work/fiberoptic mic amp/epl fiber amp/transimpedance.sch
%%Author: fosse
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%EndComments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 500 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 161.777776 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
false false false false 161.777776 [(Photometer Transimpedance Stage) ] 0 50000 40700 144.444443 text
grestore
gsave
false false false false 161.777776 [(Evan Foss) ] 0 53900 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(2014.12.14) ] 0 53800 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(transimpedance.sch) ] 0 49900 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(5) ] 0 51500 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(1) ] 0 50000 40100 144.444443 text
grestore
gsave
46200 47600 46100 47400 10 line
46100 47400 46000 47600 10 line
46000 47600 45900 47400 10 line
45900 47400 45800 47600 10 line
46200 47600 46300 47400 10 line
46300 47400 46350 47500 10 line
46500 47500 46350 47500 10 line
45600 47500 45752 47500 10 line
45801 47600 45750 47500 10 line
grestore
gsave
false true false false 202.222224 [(R1) ] 0 46000 47900 180.555557 text
grestore
gsave
true false false false 202.222224 [(1206) ] 0 46100 47700 180.555557 text
grestore
gsave
false false false false 202.222224 [(1M) ] 0 46200 47900 180.555557 text
grestore
gsave
43000 44100 43000 44300 10 line
43000 45000 43000 44800 10 line
43100 44500 43000 44600 10 line
43000 44600 42900 44500 10 line
43100 44500 42900 44500 10 line
43100 44600 42900 44600 10 line
43000 44600 43000 44800 10 line
43000 44500 43000 44300 10 line
43000 44550 200 0 360 10 darc
43281 44802 43346 44755 10 line
43418 44926 43405 44842 10 line
43271 44722 43418 44926 10 line
43270 44721 43281 44802 10 line
43346 44755 43270 44721 10 line
43405 44842 43537 44998 10 line
43285 44641 43350 44594 10 line
43422 44765 43409 44681 10 line
43275 44561 43422 44765 10 line
43274 44560 43285 44641 10 line
43350 44594 43274 44560 10 line
43409 44681 43541 44837 10 line
43100 44800 43200 44800 10 line
43300 44800 43400 44800 10 line
43400 44800 43400 44700 10 line
43400 44600 43400 44500 10 line
43400 44400 43400 44300 10 line
43400 44300 43300 44300 10 line
43200 44300 43100 44300 10 line
42900 44300 42800 44300 10 line
42700 44300 42600 44300 10 line
42600 44400 42600 44300 10 line
42600 44500 42600 44600 10 line
42600 44700 42600 44800 10 line
42600 44800 42700 44800 10 line
42800 44800 42900 44800 10 line
42600 44100 42600 44300 10 line
grestore
gsave
false true false false 202.222224 [(D1) ] 0 42500 44700 180.555557 text
grestore
gsave
false true false false 202.222224 [(OPF482) ] 0 42500 44500 180.555557 text
grestore
gsave
45600 49000 45800 49000 10 line
46500 49000 46300 49000 10 line
46000 49200 46000 48800 10 line
46100 49200 46100 48800 10 line
46300 49000 46100 49000 10 line
46000 49000 45800 49000 10 line
grestore
gsave
false true false false 202.222224 [(C1) ] 0 46000 49500 180.555557 text
grestore
gsave
false false false false 202.222224 [(2.7pF) ] 0 46200 49500 180.555557 text
grestore
gsave
true false false false 202.222224 [(0805) ] 0 46100 49300 180.555557 text
grestore
gsave
43000 43000 43000 43200 10 line
42900 43000 43100 43000 10 line
42955 42950 43045 42950 10 line
42980 42910 43020 42910 10 line
grestore
45600 49000 43000 49000 10 line
43000 49000 43000 45000 10 line
45900 45500 43000 45500 10 line
45600 47500 43000 47500 10 line
45100 45100 45900 45100 10 line
43000 43500 45100 45100 10 line
46500 49000 49500 49000 10 line
49500 49000 49500 45300 10 line
47300 45300 50000 45300 10 line
46500 47500 49500 47500 10 line
46500 46500 46500 45800 10 line
46500 43700 46500 44800 10 line
gsave
46500 43700 46500 43500 10 line
46650 43500 46350 43500 10 line
grestore
gsave
true false false true 202.222224 [(P15V:1) ] 0 46500 43450 180.555557 text
grestore
gsave
50000 43500 50000 43700 10 line
49900 43500 50100 43500 10 line
49955 43450 50045 43450 10 line
49980 43410 50020 43410 10 line
grestore
gsave
48200 44000 48400 44000 10 line
49100 44000 48900 44000 10 line
48600 44200 48600 43800 10 line
48700 44200 48700 43800 10 line
48900 44000 48700 44000 10 line
48600 44000 48400 44000 10 line
grestore
gsave
false true false false 202.222224 [(C2) ] 0 48600 44500 180.555557 text
grestore
gsave
true false false false 202.222224 [(1210) ] 0 48700 44300 180.555557 text
grestore
gsave
false false false false 202.222224 [(100nF) ] 0 48700 44500 180.555557 text
grestore
48200 44000 46500 44000 10 line
49100 44000 50000 44000 10 line
50000 43700 50000 44000 10 line
43000 43200 43000 44100 10 line
gsave
46100 44800 46100 45800 10 line
46100 44800 47100 45300 10 line
47100 45300 46100 45800 10 line
45900 45100 46100 45100 10 line
gsave
false true false true 161.777776 [(3) ] 0 46050 45050 144.444443 text
grestore
45900 45500 46100 45500 10 line
gsave
false true false true 161.777776 [(2) ] 0 46050 45450 144.444443 text
grestore
47100 45300 47300 45300 10 line
gsave
false false false true 161.777776 [(6) ] 0 47100 45250 144.444443 text
grestore
46500 45000 46500 44800 10 line
gsave
false false false true 161.777776 [(7) ] 0 46550 45000 144.444443 text
grestore
46500 45600 46500 45800 10 line
gsave
false false false false 161.777776 [(4) ] 0 46550 45600 144.444443 text
grestore
gsave
true false false false 141.555552 [(+Vs) ] 0 46500 45100 126.388885 text
grestore
gsave
false false true false 202.222224 [( +) ] 0 46100 45100 180.555557 text
grestore
gsave
false false true false 202.222224 [( -) ] 0 46100 45500 180.555557 text
grestore
gsave
true false false true 141.555552 [(-Vs) ] 0 46500 45500 126.388885 text
grestore
46700 45100 46700 44900 10 line
gsave
false false false true 161.777776 [(1) ] 0 46750 45100 144.444443 text
grestore
gsave
true false false false 141.555552 [(Vos) ] 0 46700 45200 126.388885 text
grestore
gsave
true false false true 141.555552 [(Vos) ] 0 46700 45400 126.388885 text
grestore
46700 45500 46700 45700 10 line
gsave
false false false false 161.777776 [(5) ] 0 46750 45500 144.444443 text
grestore
60 60 46670 44870 fbox
60 60 46670 45670 fbox
grestore
gsave
false false false true 202.222224 [(U1) ] 0 46900 44800 180.555557 text
grestore
gsave
false false false true 202.222224 [(LT1793) ] 0 46895 45005 180.555557 text
grestore
gsave
false false false true 202.222224 [(SO8) ] 0 46900 44600 180.555557 text
grestore
gsave
50000 45300 50200 45300 10 line
50200 45400 50200 45200 10 line
50200 45400 50700 45400 10 line
50700 45400 50800 45300 10 line
50800 45300 50700 45200 10 line
50700 45200 50200 45200 10 line
grestore
gsave
false false true false 202.222224 [(SMALL:1) ] 0 50900 45300 180.555557 text
grestore
gsave
46500 46500 46500 46700 10 line
46350 46700 46650 46700 10 line
grestore
gsave
true false false false 202.222224 [(N15V:1) ] 0 46500 46750 180.555557 text
grestore
gsave
49000 45700 49000 45900 10 line
48900 45700 49100 45700 10 line
48955 45650 49045 45650 10 line
48980 45610 49020 45610 10 line
grestore
gsave
48100 46200 47900 46200 10 line
47200 46200 47400 46200 10 line
47700 46400 47700 46000 10 line
47600 46400 47600 46000 10 line
47400 46200 47600 46200 10 line
47700 46200 47900 46200 10 line
grestore
gsave
false true false false 202.222224 [(C4) ] 0 47600 46700 180.555557 text
grestore
gsave
true false false false 202.222224 [(1210) ] 0 47700 46500 180.555557 text
grestore
gsave
false false false false 202.222224 [(100nF) ] 0 47700 46700 180.555557 text
grestore
48100 46200 49000 46200 10 line
49000 45900 49000 46200 10 line
47200 46200 46500 46200 10 line
42600 43800 42600 44100 10 line
gsave
51500 44000 51500 43800 10 line
51500 43100 51500 43300 10 line
51300 43600 51700 43600 10 line
51300 43500 51700 43500 10 line
51500 43300 51500 43500 10 line
51500 43600 51500 43800 10 line
grestore
gsave
false true false false 202.222224 [(C5) ] 0 51200 43700 180.555557 text
grestore
gsave
false true false false 202.222224 [(1210) ] 0 51200 43300 180.555557 text
grestore
gsave
false true false false 202.222224 [(100nF) ] 0 51200 43500 180.555557 text
grestore
gsave
51500 44300 51500 44500 10 line
51350 44500 51650 44500 10 line
grestore
gsave
true false false false 202.222224 [(P15V:1) ] 0 51500 44550 180.555557 text
grestore
gsave
51500 42700 51500 42500 10 line
51350 42500 51650 42500 10 line
grestore
gsave
true false false true 202.222224 [(N15V:1) ] 0 51500 42450 180.555557 text
grestore
51500 44000 51500 44300 10 line
51500 43100 51500 42700 10 line
gsave
42600 43200 42600 43000 10 line
42450 43000 42750 43000 10 line
42750 43000 42700 42900 10 line
42600 43000 42550 42900 10 line
42450 43000 42400 42900 10 line
grestore
gsave
false true false false 202.222224 [(CHASSIS:1) ] 0 42500 43100 180.555557 text
grestore
42600 43800 43000 43500 10 line
gsave
52500 46200 52500 46000 10 line
52350 46000 52650 46000 10 line
grestore
gsave
true false false true 202.222224 [(N15V:1) ] 0 52500 45950 180.555557 text
grestore
52500 46200 52500 47700 10 line
52500 47700 53300 47700 10 line
gsave
52000 48800 52000 49000 10 line
52150 49000 51850 49000 10 line
grestore
gsave
true false false false 202.222224 [(P15V:1) ] 0 52000 49050 180.555557 text
grestore
53300 47400 52000 47400 10 line
52000 47400 52000 48800 10 line
53300 48000 52900 48000 10 line
53300 48300 51500 48300 10 line
gsave
52900 46500 52900 46700 10 line
53000 46500 52800 46500 10 line
52945 46450 52855 46450 10 line
52920 46410 52880 46410 10 line
grestore
53300 47100 52200 47100 10 line
gsave
53600 48000 53300 48000 10 line
gsave
false true false false 161.777776 [(2) ] 0 54750 47950 144.444443 text
grestore
53600 47400 53300 47400 10 line
gsave
false true false false 161.777776 [(4) ] 0 54750 47350 144.444443 text
grestore
53600 48300 53300 48300 10 line
gsave
false true false false 161.777776 [(1) ] 0 54750 48250 144.444443 text
grestore
53600 47700 53300 47700 10 line
gsave
false true false false 161.777776 [(3) ] 0 54750 47650 144.444443 text
grestore
53600 47100 53300 47100 10 line
gsave
false true false false 161.777776 [(5) ] 0 54750 47050 144.444443 text
grestore
53600 48300 54500 48300 10 line
53600 48000 54500 48000 10 line
53600 47700 54500 47700 10 line
53600 47400 54500 47400 10 line
53600 47100 54500 47100 10 line
54500 46900 55000 46900 10 line
55000 46900 55000 48500 10 line
55000 48500 54500 48500 10 line
54500 48500 54500 46900 10 line
grestore
gsave
false true false false 202.222224 [(CONN5) ] 0 55000 48800 180.555557 text
grestore
gsave
false true false false 202.222224 [(molex-22-23-2051-mini_5_vert) ] 0 55000 48600 180.555557 text
grestore
52900 48000 52900 46700 10 line
gsave
51500 47700 51500 47500 10 line
51650 47500 51350 47500 10 line
51350 47500 51400 47400 10 line
51500 47500 51550 47400 10 line
51650 47500 51700 47400 10 line
grestore
gsave
false true false false 202.222224 [(CHASSIS:1) ] 0 51400 47600 180.555557 text
grestore
51500 48300 51500 47700 10 line
gsave
52000 47100 52200 47100 10 line
51400 47200 51400 47000 10 line
51400 47200 51900 47200 10 line
51900 47200 52000 47100 10 line
52000 47100 51900 47000 10 line
51900 47000 51400 47000 10 line
grestore
gsave
false true true false 202.222224 [(SMALL:1) ] 0 51300 47100 180.555557 text
grestore
gsave
false false false true 202.222224 [(Note: This board should have the solder mask ) (removed to reduce noise from current leakage.) (-EEF 2014.12.30) ] 0 52000 44000 180.555557 text
grestore
gsave
false false false true 202.222224 [(Note: A guard ring around the photodiode and ) (opamp input pins is required. It should run under) (the components in the feedback loop. It should ) (terminate at the same star as the diode and ) (opamp + input pin.) (-EEF 2014.12.30) ] 0 43500 43000 180.555557 text
grestore
gsave
false false false true 202.222224 [(Note: The math for the feedback resistor and ) (capacitor is in a Sagemath.) (-EEF 2014.12.30) ] 0 47500 50000 180.555557 text
grestore
42600 43200 43000 43500 10 line
newpath
43000 45500
25
0 360 arc
fill
newpath
43000 47500
25
0 360 arc
fill
newpath
43000 45500
25
0 360 arc
fill
newpath
43000 45500
25
0 360 arc
fill
newpath
43000 47500
25
0 360 arc
fill
newpath
43000 47500
25
0 360 arc
fill
newpath
43000 43500
25
0 360 arc
fill
newpath
43000 43500
25
0 360 arc
fill
newpath
49500 45300
25
0 360 arc
fill
newpath
49500 45300
25
0 360 arc
fill
newpath
49500 47500
25
0 360 arc
fill
newpath
49500 45300
25
0 360 arc
fill
newpath
49500 47500
25
0 360 arc
fill
newpath
49500 47500
25
0 360 arc
fill
newpath
46500 46200
25
0 360 arc
fill
newpath
46500 44000
25
0 360 arc
fill
newpath
46500 44000
25
0 360 arc
fill
newpath
46500 44000
25
0 360 arc
fill
newpath
43000 43500
25
0 360 arc
fill
newpath
43000 43500
25
0 360 arc
fill
newpath
43000 43500
25
0 360 arc
fill
60 60 46670 44870 fbox
60 60 46670 45670 fbox
newpath
46500 46200
25
0 360 arc
fill
newpath
46500 46200
25
0 360 arc
fill
newpath
43000 43500
25
0 360 arc
fill
newpath
43000 43500
25
0 360 arc
fill
newpath
43000 43500
25
0 360 arc
fill
newpath
43000 43500
25
0 360 arc
fill
showpage
%%End
